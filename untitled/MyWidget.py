#! /usr/bin/env python

"""
References

load .ui
http://www.riverbankcomputing.com/pipermail/pyqt/2007-April/015902.html
http://pyqt.sourceforge.net/Docs/PyQt4/designer.html#module-PyQt4.uic

Signal and Slot
http://pyqt.sourceforge.net/Docs/PyQt4/old_style_signals_slots.html
http://pyqt.sourceforge.net/Docs/PyQt4/new_style_signals_slots.html#connect
http://zetcode.com/gui/pyqt4/eventsandsignals/
"""

import sys
from PyQt4 import QtCore, QtGui, uic

class MyWidget(QtCore.QObject):
    def __init__(self):
        QtCore.QObject.__init__(self)
    
        # Set up the user interface from Designer.
        self.ui = uic.loadUi("widget.ui") # widget.ui is generated by Qt Creator
        self.ui.show()
    
        # Make some local modifications.
        self.ui.colorDepthCombo.addItem("2 colors (1 bit per pixel)")
    
        # Connect up the buttons.
        # Old-style Signal and Slot
        #QtCore.QObject.connect(self.ui.maxButton, QtCore.SIGNAL("clicked()"), self.ui, QtCore.SLOT("showMaximized()"))
        #QtCore.QObject.connect(self.ui.normalButton, QtCore.SIGNAL("clicked()"), self.ui, QtCore.SLOT("showNormal()"))
        #QtCore.QObject.connect(self.ui.closeButton, QtCore.SIGNAL("clicked()"), self.ui, QtCore.SLOT("close()"))
        #QtCore.QObject.connect(self.ui.lineEdit, QtCore.SIGNAL('textChanged(QString)'), self.show_string)
        #QtCore.QObject.connect(self.ui.textEdit, QtCore.SIGNAL('textChanged()'), self.update_combobox)
        
        # New-style Signal and Slot
        self.ui.maxButton.clicked.connect(self.ui.showMaximized)
        self.ui.normalButton.clicked.connect(self.ui.showNormal)
        self.ui.closeButton.clicked.connect(self.ui.close)
        self.ui.lineEdit.textChanged[str].connect(self.show_string)
        self.ui.textEdit.textChanged.connect(self.update_combobox)
        
    def show_string(self, string):
        self.ui.label.setText(string)
    
    def update_combobox(self):
        # get text from textEdit
        text = self.ui.textEdit.toPlainText()
        # convert QString to Python string and split it by whitespace characters
        str_list = str(text).split()
        print str_list
        self.ui.colorDepthCombo.clear()
        for i in str_list:
            self.ui.colorDepthCombo.addItem(i)
    
if __name__ == "__main__":
    app = QtGui.QApplication(sys.argv)
    window = MyWidget()
    sys.exit(app.exec_())
